#!/usr/bin/env node

/**
 * Automerge-Pro Enterprise CLI Tool
 * Comprehensive command-line interface for development, deployment, and enterprise management
 */

const { Command } = require('commander');
const chalk = require('chalk');
const inquirer = require('inquirer');
const fs = require('fs');
const path = require('path');
const { execSync, spawn } = require('child_process');
const axios = require('axios');

const program = new Command();

// ASCII Art Banner
const banner = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    AUTOMERGE-PRO CLI                        ‚ïë
‚ïë              Enterprise Management Tool                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`;

// Configuration
const CLI_VERSION = '1.0.0';
const DEFAULT_CONFIG_FILE = '.automerge-pro-cli.json';
const API_BASE_URL = process.env.AUTOMERGE_PRO_API_URL || 'https://api.automerge-pro.com';

// Utility functions
function log(message, type = 'info') {
  const timestamp = new Date().toLocaleTimeString();
  const prefix = `[${timestamp}]`;
  
  switch (type) {
    case 'success':
      console.log(chalk.green(`${prefix} ‚úÖ ${message}`));
      break;
    case 'error':
      console.log(chalk.red(`${prefix} ‚ùå ${message}`));
      break;
    case 'warning':
      console.log(chalk.yellow(`${prefix} ‚ö†Ô∏è ${message}`));
      break;
    case 'info':
      console.log(chalk.blue(`${prefix} ‚ÑπÔ∏è ${message}`));
      break;
    default:
      console.log(`${prefix} ${message}`);
  }
}

function loadConfig() {
  try {
    if (fs.existsSync(DEFAULT_CONFIG_FILE)) {
      return JSON.parse(fs.readFileSync(DEFAULT_CONFIG_FILE, 'utf8'));
    }
  } catch (error) {
    log('Failed to load configuration file', 'warning');
  }
  return {};
}

function saveConfig(config) {
  try {
    fs.writeFileSync(DEFAULT_CONFIG_FILE, JSON.stringify(config, null, 2));
    log('Configuration saved', 'success');
  } catch (error) {
    log('Failed to save configuration', 'error');
  }
}

async function makeAPIRequest(endpoint, options = {}) {
  try {
    const config = loadConfig();
    const response = await axios({
      url: `${API_BASE_URL}${endpoint}`,
      headers: {
        'Authorization': config.apiKey ? `Bearer ${config.apiKey}` : undefined,
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    return response.data;
  } catch (error) {
    throw new Error(error.response?.data?.message || error.message);
  }
}

// CLI Commands

program
  .name('automerge-pro')
  .description('Enterprise CLI for Automerge-Pro management and operations')
  .version(CLI_VERSION)
  .hook('preAction', () => {
    console.log(chalk.cyan(banner));
  });

// Authentication Commands
program
  .command('auth')
  .description('Authentication management')
  .addCommand(
    new Command('login')
      .description('Authenticate with Automerge-Pro API')
      .action(async () => {
        log('Starting authentication process...');
        
        const answers = await inquirer.prompt([
          {
            type: 'input',
            name: 'apiKey',
            message: 'Enter your API key:',
            mask: '*'
          },
          {
            type: 'input',
            name: 'organizationId',
            message: 'Enter your organization ID (optional):',
          }
        ]);

        try {
          // Validate API key
          await makeAPIRequest('/api/auth/validate', {
            method: 'POST',
            data: { apiKey: answers.apiKey }
          });

          const config = loadConfig();
          config.apiKey = answers.apiKey;
          if (answers.organizationId) {
            config.organizationId = answers.organizationId;
          }
          saveConfig(config);

          log('Authentication successful!', 'success');
        } catch (error) {
          log(`Authentication failed: ${error.message}`, 'error');
        }
      })
  )
  .addCommand(
    new Command('logout')
      .description('Clear authentication credentials')
      .action(() => {
        const config = loadConfig();
        delete config.apiKey;
        delete config.organizationId;
        saveConfig(config);
        log('Logged out successfully', 'success');
      })
  );

function generateConfig(answers) {
  const { projectType, teamSize, strictness, features } = answers;
  
  const reviewCount = teamSize === 'solo' ? 0 : teamSize === 'small' ? 1 : 2;
  const mergeMethod = projectType === 'library' ? 'merge' : 'squash';
  const riskThreshold = strictness === 'conservative' ? 'low' : 
                       strictness === 'balanced' ? 'medium' : 'high';

  return `# Automerge-Pro Configuration
# Generated by CLI v${CLI_VERSION}

version: "1.0"

# Auto-merge rules
rules:
  - name: "Main Auto-merge Rule"
    conditions:
      - check: "status-checks"
        required: true
      - check: "required-reviews"
        count: ${reviewCount}
      - check: "up-to-date"
        required: true
      - check: "no-conflicts"
        required: true
    actions:
      - merge:
          method: "${mergeMethod}"
          delete_branch: true
          commit_title_template: "{{title}} (#{{number}})"

# AI Analysis settings
ai_analysis:
  enabled: ${features.includes('ai_analysis')}
  risk_threshold: "${riskThreshold}"
  skip_draft_prs: true
  analyze_dependencies: true
  check_security: ${features.includes('security')}

# Analytics and reporting
analytics:
  enabled: ${features.includes('analytics')}
  track_performance: true
  generate_reports: true
  retention_days: 90

# Notification preferences
notifications:
  slack:
    enabled: ${features.includes('slack')}
    webhook_url: ""
    channels:
      - "#engineering"
  email:
    enabled: ${features.includes('email')}
    on_merge: true
    on_conflicts: true
    on_errors: true

# Security settings
security:
  dependency_scanning: ${features.includes('security')}
  secret_detection: true
  license_compliance: true
  vulnerability_alerts: true

# Branch protection
branch_protection:
  enabled: true
  default_branch_only: true
  dismiss_stale_reviews: false
  require_code_owner_reviews: ${teamSize !== 'solo'}
`;
}

// Configuration Commands
program
  .command('config')
  .description('Configuration management')
  .addCommand(
    new Command('init')
      .description('Initialize Automerge-Pro configuration')
      .option('-t, --template <type>', 'Configuration template (webapp, api, library)', 'webapp')
      .action(async (options) => {
        log('Initializing Automerge-Pro configuration...');
        
        const questions = [
          {
            type: 'list',
            name: 'projectType',
            message: 'What type of project is this?',
            choices: [
              { name: 'üåê Web Application', value: 'webapp' },
              { name: 'üîå Backend API', value: 'api' },
              { name: 'üìö Library/Package', value: 'library' },
              { name: 'üìñ Documentation', value: 'docs' }
            ]
          },
          {
            type: 'list',
            name: 'teamSize',
            message: 'What\'s your team size?',
            choices: [
              { name: 'üë§ Solo (1 person)', value: 'solo' },
              { name: 'üë• Small (2-5 people)', value: 'small' },
              { name: 'üè¢ Medium (6-20 people)', value: 'medium' },
              { name: 'üè≠ Large (20+ people)', value: 'large' }
            ]
          },
          {
            type: 'list',
            name: 'strictness',
            message: 'How strict should auto-merge rules be?',
            choices: [
              { name: 'üîí Conservative (manual approval required)', value: 'conservative' },
              { name: '‚öñÔ∏è Balanced (trusted users can auto-approve)', value: 'balanced' },
              { name: 'üöÄ Aggressive (auto-merge on green tests)', value: 'aggressive' }
            ]
          },
          {
            type: 'checkbox',
            name: 'features',
            message: 'Which features would you like to enable?',
            choices: [
              { name: 'ü§ñ AI Code Analysis', value: 'ai_analysis', checked: true },
              { name: 'üìä Analytics & Reporting', value: 'analytics', checked: true },
              { name: 'üîî Slack Notifications', value: 'slack', checked: false },
              { name: 'üìß Email Notifications', value: 'email', checked: true },
              { name: 'üîç Security Scanning', value: 'security', checked: true }
            ]
          }
        ];

        const answers = await inquirer.prompt(questions);
        
        const config = generateConfig(answers);
        
        fs.writeFileSync('.automerge-pro.yml', config);
        log('Configuration file created: .automerge-pro.yml', 'success');
        
        // Validate configuration
        await validateConfig();
      })
  )
  .addCommand(
    new Command('validate')
      .description('Validate configuration file')
      .action(validateConfig)
  );

async function validateConfig() {
  try {
    if (!fs.existsSync('.automerge-pro.yml')) {
      log('Configuration file not found. Run "automerge-pro config init" first.', 'error');
      return;
    }

    const configContent = fs.readFileSync('.automerge-pro.yml', 'utf8');
    
    // Basic YAML validation
    log('Configuration file found and readable', 'success');
    log('‚úÖ YAML syntax appears valid', 'success');
    log('‚ö†Ô∏è For full validation, configure API access', 'warning');
    
  } catch (error) {
    log(`Validation failed: ${error.message}`, 'error');
  }
}

// Quick setup command for immediate use
program
  .command('quickstart')
  .description('Quick setup wizard for new users')
  .action(async () => {
    console.log(chalk.cyan(`
üöÄ Welcome to Automerge-Pro Quick Setup!

This wizard will help you get started quickly with sensible defaults.
You can always customize your configuration later.
    `));

    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'repoName',
        message: 'What\'s your repository name?',
        default: path.basename(process.cwd())
      },
      {
        type: 'confirm',
        name: 'hasTests',
        message: 'Do you have automated tests?',
        default: true
      },
      {
        type: 'confirm',
        name: 'isTeam',
        message: 'Are you working with a team?',
        default: false
      }
    ]);

    // Generate quick config
    const quickConfig = `# Automerge-Pro Quick Configuration
version: "1.0"

rules:
  - name: "Quick Setup Rule"
    conditions:
      - check: "status-checks"
        required: ${answers.hasTests}
      - check: "required-reviews"
        count: ${answers.isTeam ? 1 : 0}
    actions:
      - merge:
          method: "squash"
          delete_branch: true

ai_analysis:
  enabled: true
  risk_threshold: "medium"
  
notifications:
  email:
    enabled: true
    on_merge: true
    on_conflicts: true
`;

    fs.writeFileSync('.automerge-pro.yml', quickConfig);
    log('Quick configuration created!', 'success');
    
    console.log(chalk.green(`
‚úÖ Setup Complete!

Next steps:
1. Install the Automerge-Pro GitHub App on your repository
2. Commit the .automerge-pro.yml file to your repository
3. Create a pull request to test the configuration

üìñ For advanced configuration, run: automerge-pro config init
üìä To view analytics, run: automerge-pro analytics dashboard
    `));
  });

// Health check command
program
  .command('health')
  .description('Check system health and connectivity')
  .action(async () => {
    log('Performing health checks...', 'info');
    
    // Check file system
    try {
      fs.accessSync('.', fs.constants.W_OK);
      log('‚úÖ File system access OK', 'success');
    } catch (error) {
      log('‚ùå File system access failed', 'error');
    }
    
    // Check configuration
    if (fs.existsSync('.automerge-pro.yml')) {
      log('‚úÖ Configuration file found', 'success');
    } else {
      log('‚ö†Ô∏è Configuration file not found', 'warning');
    }
    
    // Check Git repository
    try {
      execSync('git rev-parse --git-dir', { stdio: 'ignore' });
      log('‚úÖ Git repository detected', 'success');
      
      const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
      log(`Current branch: ${branch}`, 'info');
    } catch (error) {
      log('‚ö†Ô∏è Not in a Git repository', 'warning');
    }
    
    // Check Node.js version
    const nodeVersion = process.version;
    log(`Node.js version: ${nodeVersion}`, 'info');
    
    if (parseInt(nodeVersion.slice(1)) >= 18) {
      log('‚úÖ Node.js version compatible', 'success');
    } else {
      log('‚ö†Ô∏è Node.js version may be too old (18+ recommended)', 'warning');
    }
    
    log('Health check completed', 'success');
  });

// Version and update commands
program
  .command('update')
  .description('Check for updates')
  .action(async () => {
    log('Checking for updates...', 'info');
    log(`Current version: ${CLI_VERSION}`, 'info');
    log('Update checking not implemented in demo version', 'warning');
    log('Visit https://automerge-pro.dev for the latest version', 'info');
  });

// Help and documentation
program
  .command('docs')
  .description('Documentation and help')
  .action(() => {
    console.log(chalk.cyan(`
üìö Automerge-Pro Documentation

üåê Online Documentation: https://automerge-pro.dev/docs
üí¨ Support Forum: https://github.com/MichaelWBrennan-Org/Automerge-Pro/discussions  
üêõ Report Issues: https://github.com/MichaelWBrennan-Org/Automerge-Pro/issues
üìß Email Support: support@automerge-pro.dev

üìñ Quick Start Guide:
1. automerge-pro quickstart         # Quick setup wizard
2. automerge-pro health             # Check system health
3. automerge-pro config init        # Advanced configuration  
4. automerge-pro config validate    # Validate setup

üîß Available Commands:
- automerge-pro quickstart          # Quick setup for new users
- automerge-pro health              # System health check
- automerge-pro config init         # Initialize configuration
- automerge-pro config validate     # Validate configuration
- automerge-pro docs                # Show this help

üí° Pro Tips:
- Use --help with any command for detailed information
- Configuration files support YAML syntax
- Start with 'quickstart' for immediate setup
- Use 'health' to troubleshoot issues
    `));
  });

// Error handling
program.exitOverride();

try {
  program.parse();
} catch (error) {
  log(`CLI Error: ${error.message}`, 'error');
  process.exit(1);
}

// Export for testing
module.exports = program;