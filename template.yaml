AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Automerge-Pro GitHub App Backend - Serverless deployment on AWS Lambda'

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: nodejs18.x
    Environment:
      Variables:
        NODE_ENV: production

Parameters:
  Stage:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment stage
  
  AppId:
    Type: String
    Description: GitHub App ID
    NoEcho: true
  
  PrivateKey:
    Type: String
    Description: GitHub App Private Key (Base64 encoded)
    NoEcho: true
  
  WebhookSecret:
    Type: String
    Description: GitHub Webhook Secret
    NoEcho: true
    Default: 'CHANGE_ME'

  # Additional parameters for enterprise features
  OpenAIAPIKey:
    Type: String
    Description: OpenAI API Key for AI-powered features
    NoEcho: true
    Default: ''

  MailchimpAPIKey:
    Type: String
    Description: Mailchimp API Key for email campaigns
    NoEcho: true
    Default: ''

  TwitterAPIKey:
    Type: String
    Description: Twitter API Key for social media automation
    NoEcho: true
    Default: ''

  LinkedInAPIKey:
    Type: String
    Description: LinkedIn API Key for professional social media
    NoEcho: true
    Default: ''

  SnykToken:
    Type: String
    Description: Snyk token for security vulnerability scanning
    NoEcho: true
    Default: ''

  BigQueryProjectID:
    Type: String
    Description: Google BigQuery Project ID for advanced analytics
    Default: ''

  AlertEmail:
    Type: String
    Description: Email address for critical alerts and notifications
    Default: 'alerts@example.com'

  SlackWebhookURL:
    Type: String
    Description: Slack webhook URL for team notifications
    NoEcho: true
    Default: ''

Resources:
  # Main Lambda function for the GitHub App
  AutomergePro:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'automerge-pro-${Stage}'
      CodeUri: ./
      Handler: lambda.handler
      Description: 'Automerge-Pro GitHub App Backend'
      Environment:
        Variables:
          APP_ID: !Ref AppId
          PRIVATE_KEY: !Ref PrivateKey
          WEBHOOK_SECRET: !Ref WebhookSecret
          STAGE: !Ref Stage
          LICENSE_TABLE: !Ref LicenseTable
          FEEDBACK_TABLE: !Ref FeedbackTable
          ONBOARDING_TABLE: !Ref OnboardingTable
      Events:
        # GitHub webhooks via API Gateway
        GitHubWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /webhooks/github
            Method: post
        
        # Billing webhooks
        BillingWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /webhooks/billing
            Method: post
            
        # Health check endpoint
        HealthCheck:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /health
            Method: get
            
        # API endpoints
        ConfigApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /api/config
            Method: get
            
        BillingInfoApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /api/billing/{accountId}
            Method: get
            
        ValidateOperationApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /api/validate/{accountId}/{operation}
            Method: post
            
        # License validation endpoint
        ValidateLicenseApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /validate-license
            Method: post
            
        # Submit feedback endpoint
        SubmitFeedbackApi:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /submit-feedback
            Method: post
            
        # Onboarding dashboard
        OnboardingDashboard:
          Type: Api
          Properties:
            RestApiId: !Ref AutomergeProApi
            Path: /onboarding
            Method: get

  # DynamoDB table for license and subscription storage
  LicenseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'automerge-pro-licenses-${Stage}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: accountId
          AttributeType: S
        - AttributeName: subscriptionId
          AttributeType: S
      KeySchema:
        - AttributeName: accountId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: subscription-index
          KeySchema:
            - AttributeName: subscriptionId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Application
          Value: automerge-pro

  # DynamoDB table for feedback storage
  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'automerge-pro-feedback-${Stage}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: feedbackId
          AttributeType: S
        - AttributeName: submittedAt
          AttributeType: S
      KeySchema:
        - AttributeName: feedbackId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: submitted-at-index
          KeySchema:
            - AttributeName: submittedAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Application
          Value: automerge-pro

  # DynamoDB table for onboarding metrics
  OnboardingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'automerge-pro-onboarding-${Stage}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: accountId
          AttributeType: S
        - AttributeName: stepName
          AttributeType: S
      KeySchema:
        - AttributeName: accountId
          KeyType: HASH
        - AttributeName: stepName
          KeyType: RANGE
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Application
          Value: automerge-pro

  # API Gateway for HTTP endpoints
  AutomergeProApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'automerge-pro-api-${Stage}'
      StageName: !Ref Stage
      Description: 'API Gateway for Automerge-Pro GitHub App'
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
        DEFAULT_5xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"

  # CloudWatch Log Group for the Lambda function
  AutomergeProLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/automerge-pro-${Stage}'
      RetentionInDays: 14

  # Additional Lambda functions for enterprise features
  MarketingAutomationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'automerge-pro-marketing-${Stage}'
      CodeUri: ./
      Handler: lambda.marketingHandler
      Description: 'Marketing automation and social media management'
      Environment:
        Variables:
          OPENAI_API_KEY: !Ref OpenAIAPIKey
          MAILCHIMP_API_KEY: !Ref MailchimpAPIKey
          TWITTER_API_KEY: !Ref TwitterAPIKey
          LINKEDIN_API_KEY: !Ref LinkedInAPIKey
      Events:
        ScheduledSocialPosts:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 9 ? * MON *)'  # Weekly on Monday at 9 AM
            Description: 'Generate and schedule weekly social media posts'
        
  AnalyticsWorkerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'automerge-pro-analytics-worker-${Stage}'
      CodeUri: ./
      Handler: lambda.analyticsHandler
      Description: 'Process analytics events and generate insights'
      ReservedConcurrencyLimit: 10
      Environment:
        Variables:
          KINESIS_STREAM_NAME: !Ref AnalyticsKinesisStream
          BIGQUERY_PROJECT_ID: !Ref BigQueryProjectID
      Events:
        KinesisStream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt AnalyticsKinesisStream.Arn
            StartingPosition: LATEST
            BatchSize: 100
            MaximumBatchingWindowInSeconds: 5

  SecurityScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'automerge-pro-security-scanner-${Stage}'
      CodeUri: ./
      Handler: lambda.securityHandler
      Description: 'Automated security scanning and compliance checks'
      Timeout: 900  # 15 minutes for security scans
      MemorySize: 1024
      Environment:
        Variables:
          SNYK_TOKEN: !Ref SnykToken
          SECURITY_HUB_ARN: !Sub 'arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:hub/default'
      Events:
        DailyScan:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 2 * * ? *)'  # Daily at 2 AM
            Description: 'Daily security vulnerability scan'

  # Kinesis stream for real-time analytics
  AnalyticsKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub 'automerge-pro-analytics-${Stage}'
      ShardCount: 2
      RetentionPeriodHours: 168  # 7 days
      StreamEncryption:
        EncryptionType: KMS
        KeyId: !Ref AnalyticsKMSKey
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Application
          Value: automerge-pro

  # S3 bucket for data lake
  DataLakeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'automerge-pro-datalake-${Stage}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref AnalyticsKMSKey
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
              - TransitionInDays: 365
                StorageClass: DEEP_ARCHIVE
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt AnalyticsWorkerFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: raw-events/
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Application
          Value: automerge-pro

  # KMS keys for encryption
  AnalyticsKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS key for Automerge-Pro analytics data encryption'
      KeyPolicy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              Service:
                - kinesis.amazonaws.com
                - s3.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Stage
        - Key: Application
          Value: automerge-pro

  AnalyticsKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/automerge-pro-analytics-${Stage}'
      TargetKeyId: !Ref AnalyticsKMSKey

  # SNS topic for critical alerts
  CriticalAlertsTopicSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'automerge-pro-critical-alerts-${Stage}'
      DisplayName: 'Automerge-Pro Critical Alerts'
      KmsMasterKeyId: !Ref AnalyticsKMSKey
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlertEmail

  # CloudWatch alarms for monitoring
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'AutomergePro-HighErrorRate-${Stage}'
      AlarmDescription: 'Alert when error rate exceeds threshold'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AutomergePro
      AlarmActions:
        - !Ref CriticalAlertsTopicSNS

  HighLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'AutomergePro-HighLatency-${Stage}'
      AlarmDescription: 'Alert when function duration is high'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 25000  # 25 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AutomergePro
      AlarmActions:
        - !Ref CriticalAlertsTopicSNS

  # IAM Role for Lambda function (automatically created by SAM, but we can customize)
  AutomergeProRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'automerge-pro-lambda-role-${Stage}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AutomergeProPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/automerge-pro-${Stage}*'
                  - !GetAtt LicenseTable.Arn
                  - !Sub '${LicenseTable.Arn}/index/*'
                  - !GetAtt FeedbackTable.Arn
                  - !Sub '${FeedbackTable.Arn}/index/*'
                  - !GetAtt OnboardingTable.Arn
                  - !Sub '${OnboardingTable.Arn}/index/*'

Outputs:
  AutomergeProApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${AutomergeProApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: !Sub 'automerge-pro-api-url-${Stage}'
      
  AutomergeProFunction:
    Description: "Lambda Function ARN"
    Value: !GetAtt AutomergePro.Arn
    Export:
      Name: !Sub 'automerge-pro-function-arn-${Stage}'
      
  WebhookUrl:
    Description: "GitHub Webhook URL"
    Value: !Sub "https://${AutomergeProApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/webhooks/github"
    Export:
      Name: !Sub 'automerge-pro-webhook-url-${Stage}'
      
  BillingWebhookUrl:
    Description: "Billing Webhook URL"
    Value: !Sub "https://${AutomergeProApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/webhooks/billing"
    Export:
      Name: !Sub 'automerge-pro-billing-webhook-url-${Stage}'
      
  LicenseTableName:
    Description: "DynamoDB License Table Name"
    Value: !Ref LicenseTable
    Export:
      Name: !Sub 'automerge-pro-license-table-${Stage}'
      
  FeedbackTableName:
    Description: "DynamoDB Feedback Table Name"
    Value: !Ref FeedbackTable
    Export:
      Name: !Sub 'automerge-pro-feedback-table-${Stage}'
      
  OnboardingTableName:
    Description: "DynamoDB Onboarding Table Name"
    Value: !Ref OnboardingTable
    Export:
      Name: !Sub 'automerge-pro-onboarding-table-${Stage}'

  # Additional outputs for enterprise features
  AnalyticsStreamName:
    Description: "Kinesis Analytics Stream Name"
    Value: !Ref AnalyticsKinesisStream
    Export:
      Name: !Sub 'automerge-pro-analytics-stream-${Stage}'

  DataLakeBucketName:
    Description: "S3 Data Lake Bucket Name"
    Value: !Ref DataLakeBucket
    Export:
      Name: !Sub 'automerge-pro-datalake-bucket-${Stage}'

  KMSKeyId:
    Description: "KMS Key ID for encryption"
    Value: !Ref AnalyticsKMSKey
    Export:
      Name: !Sub 'automerge-pro-kms-key-${Stage}'

  AlertsTopicArn:
    Description: "SNS Topic ARN for critical alerts"
    Value: !Ref CriticalAlertsTopicSNS
    Export:
      Name: !Sub 'automerge-pro-alerts-topic-${Stage}'

  MarketingFunctionArn:
    Description: "Marketing Automation Function ARN"
    Value: !GetAtt MarketingAutomationFunction.Arn
    Export:
      Name: !Sub 'automerge-pro-marketing-function-${Stage}'

  SecurityScannerArn:
    Description: "Security Scanner Function ARN"
    Value: !GetAtt SecurityScannerFunction.Arn
    Export:
      Name: !Sub 'automerge-pro-security-scanner-${Stage}'

  DashboardUrl:
    Description: "Support and Analytics Dashboard URL"
    Value: !Sub "https://${AutomergeProApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/dashboard"
    Export:
      Name: !Sub 'automerge-pro-dashboard-url-${Stage}'