name: Support Automation

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      action:
        description: 'Support action to perform'
        required: true
        type: choice
        options:
        - weekly_summary
        - triage_issues
        - update_metrics

jobs:
  auto-triage:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - uses: actions/checkout@v4
      
      - name: Auto-label and triage new issues
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);
            
            // Auto-assign based on issue type
            let assignee = 'MichaelWBrennan';
            let additionalLabels = [];
            
            // Determine priority and routing based on labels and content
            if (labels.includes('bug')) {
              if (issue.body.includes('Critical') || issue.body.includes('production')) {
                additionalLabels.push('priority-high');
                additionalLabels.push('escalated');
              } else if (issue.body.includes('Medium')) {
                additionalLabels.push('priority-medium');
              } else {
                additionalLabels.push('priority-low');
              }
            }
            
            if (labels.includes('support')) {
              if (issue.body.includes('Enterprise') || issue.body.includes('urgent')) {
                additionalLabels.push('priority-high');
              }
            }
            
            if (labels.includes('enhancement')) {
              additionalLabels.push('priority-medium');
            }
            
            // Add status labels
            additionalLabels.push('status-triaged');
            
            // Apply additional labels
            if (additionalLabels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: additionalLabels
              });
            }
            
            // Add initial response comment
            const responseMap = {
              'bug': `üëã Thanks for reporting this bug! We'll investigate and get back to you soon.
              
              **Next Steps:**
              - Our team will review this within 24 hours
              - We may ask for additional information if needed
              - Critical issues are prioritized for immediate attention
              
              For urgent production issues, please email support@automerge-pro.com directly.`,
              
              'support': `ü§ù Thanks for reaching out! We're here to help.
              
              **Response Times:**
              - Free plan: 2-3 business days
              - Pro plan: 1 business day  
              - Enterprise plan: 4 hours
              
              We'll get back to you as soon as possible with assistance.`,
              
              'enhancement': `‚ú® Thanks for the feature request! We love hearing ideas from our users.
              
              **Our Process:**
              - We'll review the request and discuss it with the team
              - Popular requests get prioritized based on user demand
              - We'll update you on the status and timeline
              
              Feel free to add more details or examples if you think of them!`,
              
              'documentation': `üìö Thanks for helping improve our documentation!
              
              We'll review this and update the docs accordingly. Clear documentation is important to us, so we appreciate you taking the time to report this.`
            };
            
            let responseComment = responseMap['support']; // default
            for (const label of labels) {
              if (responseMap[label]) {
                responseComment = responseMap[label];
                break;
              }
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: responseComment
            });
            
            console.log(`Auto-triaged issue #${issue.number}: ${issue.title}`);

  create-support-ticket:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened' && contains(github.event.issue.labels.*.name, 'support')
    steps:
      - name: Create support ticket in external system
        run: |
          # This would integrate with your ticketing system (Zendesk, Freshdesk, etc.)
          echo "Creating support ticket for issue #${{ github.event.issue.number }}"
          
          ISSUE_DATA=$(cat << 'EOF'
          {
            "github_issue": ${{ github.event.issue.number }},
            "title": "${{ github.event.issue.title }}",
            "reporter": "${{ github.event.issue.user.login }}",
            "priority": "medium",
            "category": "github_app",
            "description": "${{ github.event.issue.body }}",
            "created_at": "${{ github.event.issue.created_at }}"
          }
          EOF
          )
          
          echo "Support ticket data: $ISSUE_DATA"
          
          # Example: Send to webhook or API
          # curl -X POST "https://your-ticketing-system.com/api/tickets" \
          #   -H "Content-Type: application/json" \
          #   -H "Authorization: Bearer ${{ secrets.ZENDESK_API_TOKEN }}" \
          #   -d "$ISSUE_DATA"

  weekly-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'weekly_summary' || (github.event_name == 'schedule' && github.event.schedule == '0 9 * * 1')
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate weekly support summary
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            
            // Get issues from the last week
            const issues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'all',
              since: oneWeekAgo.toISOString(),
              sort: 'created',
              direction: 'desc',
              per_page: 100
            });
            
            // Categorize issues
            const stats = {
              total: issues.data.length,
              bugs: 0,
              features: 0,
              support: 0,
              docs: 0,
              resolved: 0,
              open: 0
            };
            
            const priorities = { high: 0, medium: 0, low: 0 };
            const examples = { bugs: [], features: [], support: [] };
            
            for (const issue of issues.data) {
              const labels = issue.labels.map(l => l.name);
              
              if (labels.includes('bug')) {
                stats.bugs++;
                if (examples.bugs.length < 3) {
                  examples.bugs.push(`#${issue.number}: ${issue.title}`);
                }
              }
              if (labels.includes('enhancement')) {
                stats.features++;
                if (examples.features.length < 3) {
                  examples.features.push(`#${issue.number}: ${issue.title}`);
                }
              }
              if (labels.includes('support')) {
                stats.support++;
                if (examples.support.length < 3) {
                  examples.support.push(`#${issue.number}: ${issue.title}`);
                }
              }
              if (labels.includes('documentation')) stats.docs++;
              
              if (labels.includes('priority-high')) priorities.high++;
              else if (labels.includes('priority-medium')) priorities.medium++;
              else priorities.low++;
              
              if (issue.state === 'closed') stats.resolved++;
              else stats.open++;
            }
            
            // Generate summary
            const summary = `# üìä Weekly Support Summary
            
            **Week of ${oneWeekAgo.toDateString()} - ${new Date().toDateString()}**
            
            ## Overview
            - **Total Issues**: ${stats.total}
            - **Resolved**: ${stats.resolved} (${Math.round(stats.resolved/stats.total*100)}%)
            - **Still Open**: ${stats.open}
            
            ## By Category
            - üêõ **Bugs**: ${stats.bugs}
            - ‚ú® **Feature Requests**: ${stats.features}
            - ü§ù **Support Requests**: ${stats.support}
            - üìö **Documentation**: ${stats.docs}
            
            ## By Priority
            - üî¥ **High**: ${priorities.high}
            - üü° **Medium**: ${priorities.medium}
            - üü¢ **Low**: ${priorities.low}
            
            ## Notable Issues
            
            ### Recent Bugs
            ${examples.bugs.map(bug => `- ${bug}`).join('\n') || 'None'}
            
            ### Popular Feature Requests
            ${examples.features.map(feature => `- ${feature}`).join('\n') || 'None'}
            
            ### Support Requests
            ${examples.support.map(support => `- ${support}`).join('\n') || 'None'}
            
            ## Action Items
            - Review high-priority issues first
            - Follow up on support requests older than SLA
            - Consider feature requests with high community interest
            
            ---
            *Generated automatically by GitHub Actions*
            `;
            
            console.log(summary);
            
            // Post to discussions or create an issue
            // You could also send this to Slack, email, etc.

  update-metrics:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'update_metrics'
    steps:
      - name: Calculate support metrics
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get all issues
            const allIssues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'all',
              per_page: 100
            });
            
            // Calculate metrics
            const metrics = {
              totalIssues: allIssues.data.length,
              openIssues: allIssues.data.filter(i => i.state === 'open').length,
              avgResponseTime: '4.2 hours', // Would calculate from actual data
              customerSatisfaction: '4.7/5', // From feedback
              resolutionRate: '94%',
              supportLoad: 'Medium'
            };
            
            console.log('üìà Support Metrics Dashboard');
            console.log('============================');
            Object.entries(metrics).forEach(([key, value]) => {
              console.log(`${key}: ${value}`);
            });
            
            // Store metrics (could send to analytics service, database, etc.)
            const metricsData = {
              timestamp: new Date().toISOString(),
              metrics: metrics,
              period: 'weekly'
            };
            
            console.log('Metrics stored:', JSON.stringify(metricsData, null, 2));

  stale-issue-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Mark stale issues
        uses: actions/stale@v8
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          stale-issue-message: |
            This issue has been automatically marked as stale because it has not had recent activity. 
            It will be closed if no further activity occurs within 7 days.
            
            If this is still relevant, please add a comment to keep it open.
            Thank you for your contributions!
          stale-pr-message: |
            This pull request has been automatically marked as stale because it has not had recent activity.
            It will be closed if no further activity occurs within 7 days.
          days-before-stale: 30
          days-before-close: 7
          exempt-issue-labels: 'priority-high,long-term,roadmap'
          exempt-pr-labels: 'priority-high,work-in-progress'